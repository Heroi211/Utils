import boto3
import os
from PIL import Image
from typing import List

region = os.getenv('AWS_REGION')
aws_access_key_id = os.getenv('AWS_ACCESS_KEY_ID')
aws_secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY')
aws_storage_bucket_name = os.getenv('AWS_STORAGE_BUCKET_NAME')

def convert_to_jpeg(file_path) -> str:

        image = Image.open(file_path)
        
        if image.mode in ("RGBA", "P"):
            image = image.convert("RGB") #converto para RGB por que png tem transparencia e jpeg não
            
        base = os.path.splitext(file_path)[0] #removendo a extensão
        new_image_path = f"{base}.jpeg" #incluindo a extensão jpeg
        
        image.save(new_image_path, "JPEG")
        
        return new_image_path

        
def analyze_id(file_path) -> dict:
    results = {}
    formatted = os.path.splitext(file_path)[1]
    if formatted != ".jpeg":
        file_path = convert_to_jpeg(file_path)
    
    with open(file_path, 'rb') as document:
        imageBytes = document.read()
    
    client = boto3.client('textract', region_name=region, aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key)
    response = client.analyze_id(DocumentPages=[{'Bytes': imageBytes}])

    for doc_fields in response['IdentityDocuments']:
        for id_field in doc_fields['IdentityDocumentFields']:
            field_type = None
            field_value = None
            for key, val in id_field.items():
                if "Type" in str(key):
                    field_type = val['Text']
                elif "ValueDetection" in str(key):
                    field_value = val['Text']
            if field_type and field_value:
                results[field_type] = field_value
    
    return results